<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.co.ginong.web.repository.order.OrderRepository">

	<select id="findAll" resultType="OrderView">
		SELECT COUNT(ITEM_ID)-1 count, ov.*  from ORDER_VIEW ov
		<where>
			<if test="memberId != null">
				member_id = #{memberId}
			</if>
			<if test="query != null">
				AND id in (
					SELECT oi.order_id from ORDER_ITEM oi
					left join PRODUCT p on oi.product_id = p.id
					WHERE p.name LIKE '%${query}%'
				)
			</if>
			<if test="sort != null">
				AND CATEGORY_ID &lt; 3
			</if>
		</where>
		group by id HAVING CANCEL_ID is null
		ORDER BY `DATE` DESC
	</select>


	<select id="findCancel" resultType="OrderView">
		SELECT COUNT(ITEM_ID)-1 count, ov.*  from ORDER_VIEW ov
		<where>
			<if test="memberId != null">
				member_id = #{memberId}
			</if>
			<if test="query != null">
				AND id in (
					SELECT oi.order_id from ORDER_ITEM oi
					left join PRODUCT p on oi.product_id = p.id
					WHERE p.name LIKE '%${query}%'
				)
			</if>
		</where>
		group by id HAVING CANCEL_ID is not null
		ORDER BY CNCL_DATE DESC,`DATE` DESC
	</select>


	<select id="findRefund" resultType="OrderView">
		SELECT * from ORDER_VIEW ov
		<where>
			REFUND_ID is not null
			<if test="memberId != null">
				AND member_id = #{memberId}
			</if>
			<if test="query != null">
				AND PRETTY_NAME LIKE '%${query}%'
			</if>
			<if test="sort">
				AND RFND_STATE = 1
			</if>
		</where>
		ORDER BY RFND_REG_DATE DESC
	</select>

	<select id="findExchange" resultType="OrderView">
		SELECT * from ORDER_VIEW ov
		<where>
			EXCHANGE_ID is not null
			<if test="memberId != null">
				AND member_id = #{memberId}
			</if>
			<if test="query != null">
				AND PRETTY_NAME LIKE '%${query}%'
			</if>
			<if test="sort != null">
				AND EXCH_STATE = #{sort}
			</if>
		</where>
		ORDER BY EXCH_REG_DATE DESC
	</select>

	<select id="findItems" resultType="OrderView">
		SELECT * from ORDER_VIEW ov
		<where>
			<if test="orderId">
				id = #{orderId}
			</if>
		</where>
	</select>

	<select id="findByExchangeId" resultType="OrderView">
		SELECT * from ORDER_VIEW ov
		<where>
			<if test="exchangeId">
				EXCHANGE_ID = #{exchangeId}
			</if>
		</where>
	</select>

	<select id="findByRefundId" resultType="OrderView">
		SELECT * from ORDER_VIEW ov
		<where>
			<if test="refundId">
				REFUND_ID = #{refundId}
			</if>
		</where>
	</select>


	<select id="findItemsByCancelId" resultType="OrderView">
		SELECT * from ORDER_VIEW ov
		<where>
			<if test="refundId">
				REFUND_ID = #{cancelId}
			</if>
		</where>
	</select>



	<insert id="save" parameterType="Order">
		insert into `ORDER`(ID,`DATE`, CATEGORY_ID, MEMBER_ID, LOCATION_ID)
		VALUES(
		#{id}
		,current_timestamp()
		,#{categoryId}
		,#{memberId}
		,#{locationId})
	</insert>

	<update id="update" parameterType="Order">
		update `ORDER`
		<set>
			<if test="categoryId != null">
				CATEGORY_ID = #{categoryId},
			</if>
			<if test="trackingNum != null">
				TRACKING_NUM = #{trackingNum},
			</if>
			<if test="cancelId != null">
				CANCEL_ID = #{cancelId}
			</if>
		</set>
		<where>
			ID = #{id}
		</where>
	</update>

	<select id="countByMemberId" resultType="Integer">
		SELECT IFNULL(COUNT(ID), 0) AS count_order
		FROM `ORDER`
		WHERE MEMBER_ID = #{member_Id}
	</select>

	<select id="findRecentByMemberId" resultType="Order">
		SELECT *
		FROM `ORDER`
		WHERE MEMBER_ID = #{member_Id}
		ORDER BY DATE DESC
		LIMIT 1
	</select>

	<select id="findByMemberId" resultType="OrderView">
		SELECT *
		FROM `ORDER_VIEW`
		WHERE MEMBER_ID = #{member_Id}
	</select>


	<select id="countStatus" >
		SELECT
			IFNULL(d.count,0) day,
			IFNULL(w.count,0) week,
			IFNULL(m.count,0) month,
			IFNULL(y.count,0) year
		FROM (
			SELECT DATE(DATE) day , COUNT(*)count
			FROM `ORDER`
			WHERE CANCEL_ID IS NULL
			AND DATE(DATE) = CURRENT_DATE()
			GROUP BY day
		)d
		RIGHT JOIN (
			SELECT YEAR(DATE) y, MONTH(DATE)m, WEEK(DATE)w, COUNT(*)count
			FROM `ORDER`
			WHERE CANCEL_ID IS NULL
			GROUP BY y, m, w
			HAVING w = WEEK(CURRENT_TIMESTAMP)
		) w ON 1 = 1
		RIGHT JOIN (
			SELECT YEAR(DATE) AS year, MONTH(DATE) AS month, COUNT(*) AS count
			FROM `ORDER`
			WHERE CANCEL_ID IS NULL
			GROUP BY year, month
			HAVING month = MONTH(CURRENT_TIMESTAMP)
		) m ON 1 = 1
		RIGHT JOIN (
			SELECT YEAR(DATE) AS year, COUNT(*) AS count
			FROM `ORDER`
			WHERE CANCEL_ID IS NULL
			AND YEAR(DATE) = YEAR(CURRENT_TIMESTAMP)
			GROUP BY year
		) y ON 1 = 1;
	</select>

	<select id="findBySalesVolume" resultType="OrderView">
		SELECT COUNT(*) AS COUNT, PRETTY_NAME
		FROM ORDER_VIEW
		GROUP BY PRODUCT_ID
		ORDER BY COUNT DESC
		LIMIT 10;
	</select>

	<select id="calculateSalesOfDays" resultType="OrderView">
		SELECT DATE, '주문건수' as CATEGORY, COUNT(*) AS COUNT
		FROM ORDER_VIEW
		GROUP BY DATE
		UNION
		SELECT T.DATE, '취소건수' as CATEGORY, COUNT(T.COUNT) AS COUNT FROM
		(SELECT DATE_FORMAT(CNCL_DATE, '%Y-%m-%d') AS DATE, 1 COUNT FROM ORDER_VIEW
		WHERE CNCL_DATE IS NOT NULL) T
		GROUP BY T.DATE
		UNION
		SELECT T.DATE, '교환건수' as CATEGORY, COUNT(T.COUNT) AS COUNT FROM
		(SELECT DATE_FORMAT(EXCH_REG_DATE, '%Y-%m-%d') AS DATE, 1 COUNT FROM ORDER_VIEW
		WHERE EXCH_REG_DATE IS NOT NULL) T
		GROUP BY T.DATE
		UNION
		SELECT T.DATE, '환불건수' as CATEGORY, COUNT(T.COUNT) AS COUNT FROM
		(SELECT DATE_FORMAT(RFND_REG_DATE, '%Y-%m-%d') AS DATE, 1 COUNT FROM ORDER_VIEW
		WHERE RFND_REG_DATE IS NOT NULL) T
		GROUP BY T.DATE
		ORDER BY DATE;
	</select>
</mapper>